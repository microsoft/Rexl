Flags: __, min: 1, max: 1, Path: Abs
  Computes the absolute value of the number.
    0) source: The number to get absolute value.
Flags: __, min: 1, max: 1, Path: Acos
  Computes the angle in radians whose cosine is the specified number.
    0) value: The cosine value.
Flags: __, min: 2, max: *, Path: AddFields
  Combines the source record with field definitions to produce a new record, with added, modified or removed fields.
    0) source: The source record or sequence of records.
    1) definition: A named value ('field_name: value'), defining a field in the result record. If 'value' is the 'null' literal, then 'field_name' is dropped from the result record.
    [1, 2): Repetitive, min count = 1
  Expanded Form
    0) source: The source record or sequence of records.
    1) definition1: A named value ('field_name: value'), defining a field in the result record. If 'value' is the 'null' literal, then 'field_name' is dropped from the result record.
    2) definition2: A named value ('field_name: value'), defining a field in the result record. If 'value' is the 'null' literal, then 'field_name' is dropped from the result record.
    [2, 3): Repetitive, min count = 0
Flags: __, min: 1, max: 2, Path: All
  Determines whether all items of the source sequence are true.
    0) source: Sequence of booleans to evaluate.
  Determines whether all items of the source sequence satisfy the predicate.
    0) source: Sequence of items to evaluate.
    1) predicate: The condition with which to test an item.
Flags: __, min: 1, max: 2, Path: Any
  Determines whether at least one item of the source sequence is true.
    0) source: Sequence of booleans to evaluate.
  Determines whether at least one item of the source sequence satisfies the predicate.
    0) source: Sequence of items to evaluate.
    1) predicate: The condition with which to test an item.
Flags: __, min: 1, max: 1, Path: Asin
  Computes the angle in radians whose sine is the specified number.
    0) value: The sine value.
Flags: __, min: 1, max: 1, Path: Atan
  Computes the angle in radians whose tangent is the specified number.
    0) value: The tangent value.
Flags: __, min: 2, max: 2, Path: Bin
  Computes 'x' rounded towards zero to the nearest integer multiple of 'y'.
    0) x: The number to round toward zero.
    1) y: The bin size. Note that its sign does not affect the result.
Flags: __, min: 0, max: 1, Path: CastDate
  Casts an optional value to Date, or returns the default (1/1/0001) if not possible.
    0) value: The value to cast to Date.
    [0, 1): Optional
Flags: __, min: 0, max: 1, Path: CastGuid
  Converts an optional value to Guid, or returns the default if not possible.
    0) value: The value to cast to Guid.
    [0, 1): Optional
Flags: __, min: 1, max: 1, Path: CastI1
  Converts the value to 1-byte int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastI2
  Converts the value to 2-byte int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastI4
  Converts the value to 4-byte int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastI8
  Converts the value to 8-byte int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastIA
  Converts the value to arbitrary precision integer without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastInt
  Converts the value to 8-byte int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastR4
  Converts the value to 4-byte float without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastR8
  Converts the value to 8-byte float without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastReal
  Converts the value to 8-byte float without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastShort
  Converts the value to 4-byte int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 0, max: 1, Path: CastTime
  Casts an optional value to Time, or returns the default if not possible.
    0) value: The value to cast to Time.
    [0, 1): Optional
Flags: __, min: 1, max: 1, Path: CastU1
  Converts the value to 1-byte unsigned int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastU2
  Converts the value to 2-byte unsigned int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastU4
  Converts the value to 4-byte unsigned int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: 1, Path: CastU8
  Converts the value to 8-byte unsigned int without boundary checks. Returns 0 if the conversion is not possible.
    0) value: The value to convert.
Flags: __, min: 1, max: *, Path: Chain
  Concatenates sequences.
    0) source: A sequence to concatenate.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A sequence to concatenate.
    1) source2: A sequence to concatenate.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: ChainMap
  Flattens the sequence of sequences into a single sequence.
    0) source: The sequence to flatten.
  Flattens the sequence of sequences into a single sequence after applying the sequence selector.
    0) source: The sequence to flatten.
    1) selector: The sequence selector to apply on the sequence to flatten.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The sequence to flatten.
    1) source2: The sequence to flatten.
    2) selector: The sequence selector to apply on the sequence to flatten.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: 1, Path: Cos
  Computes the cosine of the specified angle in radians.
    0) angle: The angle, measured in radians.
Flags: __, min: 1, max: 1, Path: CosD
  Computes the cosine of the specified angle in degrees.
    0) angle: The angle, measured in degrees.
Flags: __, min: 1, max: 1, Path: Cosh
  Computes the hyperbolic cosine of the specified value.
    0) value: The value.
Flags: __, min: 1, max: 1, Path: Cot
  Computes the cotangent of the specified angle in radians.
    0) angle: The angle, measured in radians.
Flags: __, min: 1, max: 1, Path: CotD
  Computes the cotangent of the specified angle in degrees.
    0) angle: The angle, measured in degrees.
Flags: __, min: 1, max: 1, Path: Coth
  Computes the hyperbolic cotangent of the specified value.
    0) value: The value.
Flags: __, min: 1, max: 2, Path: Count
  Gets the number of items contained in the source sequence which satisfy the optional predicate.
    0) source: A sequence.
    1) predicate: The condition with which to test an item.
    [1, 2): Optional
Flags: __, min: 4, max: 6, Path: CrossJoin
  Joins two sequences via the match predicate and selector, with optional unmatched left and right selectors.
    0) left_sequence: The left sequence to join.
    1) right_sequence: The right sequence to join.
    2) match_predicate: The match condition.
    3) match_selector: The selector for a match.
    4) unmatched_left_selector: The selector for an unmatched value from the left sequence.
    5) unmatched_right_selector: The selector for an unmatched value from the right sequence.
    [4, 6): Optional
Flags: __, min: 1, max: 1, Path: Csc
  Computes the cosecant of the specified angle in radians.
    0) angle: The angle, measured in radians.
Flags: __, min: 1, max: 1, Path: CscD
  Computes the cosecant of the specified angle in degrees.
    0) angle: The angle, measured in degrees.
Flags: __, min: 1, max: 1, Path: Csch
  Computes the hyperbolic cosecant of the specified value.
    0) value: The value.
Flags: __, min: 3, max: 8, Path: Date
  Creates a Date value using the specified year, month, day, hour, minute, second, millisecond, and ticks.
    0) year: The year component of the Date.
    1) month: The month component of the Date.
    2) day: The day component of the Date.
    3) hour: The hour component of the Date.
    4) minute: The minute component of the Date.
    5) second: The second component of the Date.
    6) millisecond: The millisecond component of the Date.
    7) ticks: The ticks component of the Date.
    [3, 8): Optional
Flags: __, min: 1, max: 1, Path: Date.Date
  Extracts the date portion and drops the time from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Day
  Extracts the day component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.DayOfWeek
  Returns the day of week of the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.DayOfYear
  Returns the day of year of the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Hour
  Extracts the hour component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Hr
  Extracts the hour component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Millisecond
  Extracts the millisecond component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Min
  Extracts the minute component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Minute
  Extracts the minute component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Month
  Extracts the month component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Ms
  Extracts the millisecond component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 0, max: 0, Path: Date.Now
  [volatile] Returns a record with the current date (and time of day) in both 'Utc' and 'Local', together with the time zone 'Offset'
Flags: __, min: 0, max: 0, Path: Date.Now.Local
  [volatile] Returns the current local date (and time of day)
Flags: __, min: 0, max: 0, Path: Date.Now.Utc
  [volatile] Returns the current UTC date (and time of day)
Flags: __, min: 1, max: 1, Path: Date.Sec
  Extracts the second component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Second
  Extracts the second component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.StartOfDay
  Extracts the date portion and drops the time from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.StartOfMonth
  Returns the first Date value in the month of the specified Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.StartOfWeek
  Returns the first Date value in the week of the specified Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.StartOfYear
  Returns the first Date value in the year of the specified Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Tick
  Extracts the tick component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Time
  Extracts the time portion as a Time from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.TimeOfDay
  Extracts the time portion as a Time from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.TotalTicks
  Returns the total ticks of the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Date.Year
  Extracts the year component from the Date value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Def
Flags: __, min: 1, max: 1, Path: DefItem
Flags: __, min: 1, max: 1, Path: DefItemOpt
Flags: __, min: 1, max: 1, Path: DefItemReq
Flags: __, min: 1, max: 1, Path: DefOpt
Flags: __, min: 1, max: 1, Path: DefReq
Flags: __, min: 1, max: 1, Path: Degrees
  Converts the specified angle measured in radians to an angle measured in degrees.
    0) angle: The angle, measured in radians.
Flags: __, min: 1, max: 2, Path: Distinct
  Gets the distinct items contained in the sequence in the original order of their first appearance.
    0) source: The sequence to remove duplicated items from.
    1) key_selector: Optional key value to match by.
    [1, 2): Optional
Flags: __, min: 2, max: 2, Path: Div
  Computes 'x' divided by 'y' then rounds toward zero to the nearest integer.
    0) x: The numerator to be divided by denominator.
    1) y: The denominator by which numerator is to be divided.
Flags: __, min: 2, max: 3, Path: Drop
  Drops the items of the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
  Drops the initial items contained in the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
  Drops the first 'count' items contained in the source sequence that satisfy the optional predicate.
    0) source: The source sequence.
    1) count: The number of items to drop.
  Drops the first 'count' items contained in the source sequence that satisfy the optional predicate.
    0) source: The source sequence.
    1) count: The number of items to drop.
    2) predicate: The condition with which to test an item.
  Drops the initial 'count' items contained in the source sequence that satisfy the [while] predicate.
    0) source: The source sequence.
    1) count: The number of items to drop.
    2) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
Flags: __, min: 2, max: 2, Path: DropIf
  Drops the items of the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
Flags: __, min: 1, max: 2, Path: DropOne
  Drops the first item in the source sequence that satisfies the optional predicate.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
    [1, 2): Optional
Flags: __, min: 2, max: 2, Path: DropWhile
  Drops the initial items contained in the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
Flags: __, min: 1, max: 1, Path: Exp
  Computes e raised to the specified power.
    0) value: The value specifying the power.
Flags: __, min: 2, max: 2, Path: Filter
  Takes the items of the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
Flags: __, min: 1, max: 3, Path: First
  Gets the first item contained in the sequence that satisfies the optional predicate. Otherwise returns null.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
    2) else: The value to return if the sequence is empty or no item satisfies the predicate.
    [1, 3): Optional
Flags: __, min: 1, max: 1, Path: Float.Bits
Flags: __, min: 1, max: 1, Path: Float.FromBits
Flags: __, min: 1, max: 1, Path: Float.IsNaN
Flags: __, min: 1, max: 1, Path: Float.IsNotNaN
Flags: __, min: 3, max: 4, Path: Fold
  Computes a value from the source sequence and the seed by repeatedly evaluating an iteration selector.
    0) source: The sequence to compute from, typically including an item name ('name: sequence').
    1) seed: The initial iteration value, typically including a name ('name: value').
    2) iteration_selector: The new iteration value computed from the current item of the sequence and the previous iteration value.
    3) result_selector: The final result computed from the last iteration value.
    [3, 4): Optional
Flags: __, min: 2, max: *, Path: ForEach
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences. The length of the resulting sequence is the length of the shortest source sequence.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences that satisfies the [if] predicate.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences, as long as the [while] predicate is satisfied.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 3, max: *, Path: ForEachIf
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences that satisfies the [if] predicate.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 3, max: *, Path: ForEachWhile
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences, as long as the [while] predicate is satisfied.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: _D, min: 2, max: 4, Path: Gen, Alt: Generate
  Generates a sequence of 'count' values, where each result value is computed from its index.
    0) count: The number of items to generate.
    1) selector: The result value computed from the current index.
  Generates a sequence of 'count' values, where each result value is computed from an iteration value. The iteration value is initialized to 'seed' and is updated by repeatedly evaluating an iteration selector with access to the current index.
    0) count: The number of items to generate.
    1) seed: The initial iteration value, typically including a name ('name: value').
    2) iteration_selector: The new iteration value computed from the current index and the previous iteration value.
    3) result_selector: The result value computed from the iteration value.
    [3, 4): Optional
Flags: __, min: 2, max: 4, Path: Generate
  Generates a sequence of 'count' values, where each result value is computed from its index.
    0) count: The number of items to generate.
    1) selector: The result value computed from the current index.
  Generates a sequence of 'count' values, where each result value is computed from an iteration value. The iteration value is initialized to 'seed' and is updated by repeatedly evaluating an iteration selector with access to the current index.
    0) count: The number of items to generate.
    1) seed: The initial iteration value, typically including a name ('name: value').
    2) iteration_selector: The new iteration value computed from the current index and the previous iteration value.
    3) result_selector: The result value computed from the iteration value.
    [3, 4): Optional
Flags: H_, min: 1, max: 1, Path: GetBindInfo
Flags: __, min: 1, max: 1, Path: GetPixels
Flags: __, min: 1, max: 1, Path: GetPixelsU4
Flags: H_, min: 1, max: 1, Path: GetType
Flags: _D, min: 1, max: *, Path: GlueMap, Alt: ChainMap
  Flattens the sequence of sequences into a single sequence.
    0) source: The sequence to flatten.
  Flattens the sequence of sequences into a single sequence after applying the sequence selector.
    0) source: The sequence to flatten.
    1) selector: The sequence selector to apply on the sequence to flatten.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The sequence to flatten.
    1) source2: The sequence to flatten.
    2) selector: The sequence selector to apply on the sequence to flatten.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 2, max: *, Path: GroupBy
  Groups the items of the sequence.
    0) source: The sequence whose items to group.
    1) key_selector: Key value to group by. Optionally prefixed with [key] directive to differentiate from 'auto_name' ('[key] name: value').
    2) group_selector: The value computed from a group. Prefixed with [group] directive ('[group] name: value').
    3) item_selector: The value computed from each item of a group. Prefixed with [item] directive ('[item] name: value').
    4) auto_name: Field name for the group sequence (with any key fields dropped).
    [1, 2): Repetitive, min count = 1
    [2, 3): Repetitive, min count = 0
    [3, 4): Repetitive, min count = 0
    [4, 5): Optional
  Expanded Form
    0) source: The sequence whose items to group.
    1) key_selector1: Key value to group by. Optionally prefixed with [key] directive to differentiate from 'auto_name' ('[key] name: value').
    2) key_selector2: Key value to group by. Optionally prefixed with [key] directive to differentiate from 'auto_name' ('[key] name: value').
    3) group_selector: The value computed from a group. Prefixed with [group] directive ('[group] name: value').
    4) item_selector: The value computed from each item of a group. Prefixed with [item] directive ('[item] name: value').
    5) auto_name: Field name for the group sequence (with any key fields dropped).
    [2, 3): Repetitive, min count = 0
    [3, 4): Repetitive, min count = 0
    [4, 5): Repetitive, min count = 0
    [5, 6): Optional
Flags: __, min: 2, max: *, Path: Guard
  Evaluates selector in the context of definition(s). A null definition value will result in a null result.
    0) definition: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) definition1: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) definition2: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    2) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 2, max: *, Path: GuardMap
  Evaluates selector in the context of definition(s). A null definition value will result in a null result.
    0) definition: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) definition1: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) definition2: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    2) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 0, max: 0, Path: Guid.Make
  Generates a Guid. This is a volatile function, not usable in some contexts.
Flags: __, min: 2, max: *, Path: If
  Tests the provided conditions until one is true and returns the corresponding value.
    0) condition: The condition to test.
    1) value: The value returned when the condition is true.
    2) else_value: The value returned when no condition is true.
    [0, 2): Repetitive, min count = 1
    [2, 3): Optional
  Expanded Form
    0) condition1: The condition to test.
    1) value1: The value returned when the condition is true.
    2) condition2: The condition to test.
    3) value2: The value returned when the condition is true.
    4) else_value: The value returned when no condition is true.
    [2, 4): Repetitive, min count = 0
    [4, 5): Optional
Flags: __, min: 1, max: 1, Path: Int.Hex
Flags: __, min: 1, max: 1, Path: IsEmpty
  Tests whether the sequence or text is empty or null.
    0) source: The source sequence or text to be tested.
Flags: __, min: 1, max: 1, Path: IsNull
  Tests whether the source value is null.
    0) source: The source value to be tested.
Flags: __, min: 5, max: 7, Path: KeyJoin
  Joins two sequences using match keys and selector, with optional unmatched left and right selectors.
    0) left_sequence: The left sequence to join.
    1) right_sequence: The right sequence to join.
    2) left_match_key: The left key value.
    3) right_match_key: The right key value.
    4) match_selector: The selector for a match.
    5) unmatched_left_selector: The selector for an unmatched value from the left sequence.
    6) unmatched_right_selector: The selector for an unmatched value from the right sequence.
    [5, 7): Optional
Flags: __, min: 2, max: 2, Path: Like
Flags: __, min: 2, max: 2, Path: LikeOr
Flags: __, min: 2, max: 2, Path: LikeOrDef
Flags: __, min: 2, max: 2, Path: LikeOrNull
Flags: __, min: 2, max: 2, Path: LikeOrVal
Flags: __, min: 1, max: 1, Path: Link.Account
  Extracts the account of the link or null if it doesn't have one.
    0) link: The link.
Flags: __, min: 3, max: 3, Path: Link.Blob
  Produces a link to a resource or null.
    0) flavor: Type of the resource, e.g. "Image", "Video", "Text", "Image.Xray", etc.
    1) account_id: Account ID.
    2) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.BlobAudio
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.BlobData
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.BlobImage
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.BlobPDF
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.BlobText
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.BlobVideo
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 3, max: 3, Path: Link.DataLake
  Produces a link to a resource or null.
    0) flavor: Type of the resource, e.g. "Image", "Video", "Text", "Image.Xray", etc.
    1) account_id: Account ID.
    2) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.DataLakeAudio
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.DataLakeData
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.DataLakeImage
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.DataLakePDF
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.DataLakeText
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.DataLakeVideo
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.Kind
  Extracts the kind of the link.
    0) link: The link.
Flags: __, min: 3, max: 3, Path: Link.LegacyDataLake
  Produces a link to a resource or null.
    0) flavor: Type of the resource, e.g. "Image", "Video", "Text", "Image.Xray", etc.
    1) account_id: Account ID.
    2) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.LegacyDataLakeAudio
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.LegacyDataLakeData
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.LegacyDataLakeImage
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.LegacyDataLakePDF
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.LegacyDataLakeText
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.LegacyDataLakeVideo
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: Link.Local
  Produces a link to a resource or null.
    0) flavor: Type of the resource, e.g. "Image", "Video", "Text", "Image.Xray", etc.
    1) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.LocalAudio
  Produces a link to a resource or null.
    0) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.LocalData
  Produces a link to a resource or null.
    0) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.LocalImage
  Produces a link to a resource or null.
    0) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.LocalPDF
  Produces a link to a resource or null.
    0) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.LocalText
  Produces a link to a resource or null.
    0) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.LocalVideo
  Produces a link to a resource or null.
    0) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: Link.Path
  Extracts the path of the link.
    0) link: The link.
Flags: __, min: 2, max: 2, Path: Link.Web
  Produces a link to a resource or null.
    0) flavor: Type of the resource, e.g. "Image", "Video", "Text", "Image.Xray", etc.
    1) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: Link.WebAudio
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: Link.WebData
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: Link.WebImage
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: Link.WebPDF
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: Link.WebText
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: Link.WebVideo
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 2, max: 2, Path: LinkToBlobStorageAudio, Alt: Link.BlobAudio
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToBlobStorageData, Alt: Link.BlobData
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToBlobStorageImage, Alt: Link.BlobImage
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToBlobStoragePDF, Alt: Link.BlobPDF
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToBlobStorageText, Alt: Link.BlobText
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToBlobStorageVideo, Alt: Link.BlobVideo
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToDataLakeAudio, Alt: Link.DataLakeAudio
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToDataLakeData, Alt: Link.DataLakeData
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToDataLakeImage, Alt: Link.DataLakeImage
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToDataLakePDF, Alt: Link.DataLakePDF
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToDataLakeText, Alt: Link.DataLakeText
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToDataLakeVideo, Alt: Link.DataLakeVideo
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToLegacyDataLakeAudio, Alt: Link.LegacyDataLakeAudio
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToLegacyDataLakeData, Alt: Link.LegacyDataLakeData
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToLegacyDataLakeImage, Alt: Link.LegacyDataLakeImage
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToLegacyDataLakePDF, Alt: Link.LegacyDataLakePDF
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToLegacyDataLakeText, Alt: Link.LegacyDataLakeText
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 2, max: 2, Path: LinkToLegacyDataLakeVideo, Alt: Link.LegacyDataLakeVideo
  Produces a link to a resource or null.
    0) account_id: Account ID.
    1) path: The path of the resource.
Flags: __, min: 1, max: 1, Path: LinkToWebAudio, Alt: Link.WebAudio
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: LinkToWebData, Alt: Link.WebData
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: LinkToWebImage, Alt: Link.WebImage
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: LinkToWebPDF, Alt: Link.WebPDF
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: LinkToWebText, Alt: Link.WebText
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: LinkToWebVideo, Alt: Link.WebVideo
  Produces a link to a resource or null.
    0) url: URL of the resource.
Flags: __, min: 1, max: 1, Path: Ln
  Computes the natural logarithm of the specified number.
    0) value: The value.
Flags: __, min: 1, max: 1, Path: Log10
  Computes the base 10 logarithm of the specified number.
    0) value: The value.
Flags: H_, min: 1, max: 1, Path: MakePairs
Flags: __, min: 2, max: *, Path: Map
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences. The length of the resulting sequence is the length of the shortest source sequence.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences that satisfies the [if] predicate.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences, as long as the [while] predicate is satisfied.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: Max
  Computes the maximum value of the sequence.
    0) source: The sequence to maximize.
  Computes the maximum of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to maximize.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to maximize.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: MaxC
  Computes the maximum value of the sequence.
    0) source: The sequence to maximize.
  Computes the maximum of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to maximize.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to maximize.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: Mean
  Computes the average of the sequence.
    0) source: The sequence to average.
  Computes the average of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to average.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to average.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: MeanC
  Computes the average of the sequence.
    0) source: The sequence to average.
  Computes the average of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to average.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to average.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: Min
  Computes the minimum value of the sequence.
    0) source: The sequence to minimize.
  Computes the minimum of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to minimize.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to minimize.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: MinC
  Computes the minimum value of the sequence.
    0) source: The sequence to minimize.
  Computes the minimum of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to minimize.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to minimize.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: MinMax
  Computes the minimum and maximum values of the sequence.
    0) source: The sequence to minimize and maximize.
  Computes the minimum and maximum values of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to minimize and maximize.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to minimize and maximize.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: MinMaxC
  Computes the minimum and maximum values of the sequence.
    0) source: The sequence to minimize and maximize.
  Computes the minimum and maximum values of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to minimize and maximize.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to minimize and maximize.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 2, max: 2, Path: Mod
  Computes the remainder when 'x' is divided by 'y' with the quotient rounded toward zero to the nearest integer value. Note that the sign of the result is the same as the sign of 'x'.
    0) x: The numerator to be divided by denominator.
    1) y: The denominator by which numerator is to be divided.
Flags: __, min: 2, max: 3, Path: Module.Maximize
Flags: __, min: 2, max: 3, Path: Module.Minimize
Flags: __, min: 3, max: 4, Path: Module.Optimize
Flags: __, min: 1, max: 1, Path: Null
Flags: __, min: 1, max: 1, Path: NullItem
Flags: __, min: 1, max: 1, Path: Opt
Flags: __, min: 1, max: 1, Path: PixelsToPng
Flags: __, min: 1, max: 1, Path: Radians
  Converts the specified angle measured in degrees to an angle measured in radians.
    0) angle: The angle, measured in degrees.
Flags: __, min: 0, max: 3, Path: Random.Uniform
  [volatile] Generates random real numbers distributed uniformly over the unit interval [0, 1).
    0) count: If given, generate a sequence of this many random numbers.
    [0, 1): Optional
  [volatile] Generates random real numbers distributed uniformly over the given interval.
    0) x: First bound of the interval.
    1) y: Second bound of the interval.
    2) count: If given, generate a sequence of this many random numbers.
    [2, 3): Optional
Flags: __, min: 1, max: 4, Path: RandomS.Uniform
  Generates random real numbers distributed uniformly over the unit interval [0, 1).
    0) seed: Seed to use for random number generation.
    1) count: If given, generate a sequence of this many random numbers.
    [1, 2): Optional
  Generates random real numbers distributed uniformly over the given interval.
    0) seed: Seed to use for random number generation.
    1) x: First bound of the interval.
    2) y: Second bound of the interval.
    3) count: If given, generate a sequence of this many random numbers.
    [3, 4): Optional
Flags: __, min: 1, max: 3, Path: Range
  Generates an arithmetic sequence of integers within a specified range.
    0) min: Inclusive lower limit of generated sequence.
    1) limit: Exclusive upper limit of generated sequence.
    2) step: Step distance between each generated value in sequence.
    [0, 1): Optional
    [2, 3): Optional
Flags: __, min: 1, max: 1, Path: ReadAll
Flags: __, min: 1, max: 1, Path: ReadPixels
Flags: __, min: 1, max: 1, Path: ReadPixelsU4
Flags: __, min: 2, max: 2, Path: Repeat
  Produces a sequence consisting of the value repeated count times.
    0) value: The value to repeat.
    1) count: The number of items to produce.
Flags: __, min: 2, max: 3, Path: ResizePixels
Flags: __, min: 1, max: 1, Path: Round
  Rounds the value to the nearest integer, and rounds midpoint values to the nearest even integer.
    0) value: The value to be rounded.
Flags: __, min: 1, max: 1, Path: RoundDown
  Returns the largest integral value less than or equal to the specified number.
    0) value: The value to be rounded.
Flags: __, min: 1, max: 1, Path: RoundIn
  Returns to the nearest integer towards zero.
    0) value: The value to be rounded.
Flags: __, min: 1, max: 1, Path: RoundOut
  Returns to the nearest integer away from zero.
    0) value: The value to be rounded.
Flags: __, min: 1, max: 1, Path: RoundUp
  Returns the smallest integral value greater than or equal to the specified number.
    0) value: The value to be rounded.
Flags: __, min: 3, max: 4, Path: ScanX
  Computes a sequence of values from the source sequence and the seed by repeatedly evaluating an iteration selector.
    0) source: The sequence to compute from, typically including an item name ('name: sequence').
    1) seed: The initial iteration value, typically including a name ('name: value').
    2) iteration_selector: The new iteration value computed from the current item of the sequence and the previous iteration value.
    3) result_selector: The result value computed from the iteration value.
    [3, 4): Optional
Flags: __, min: 3, max: 4, Path: ScanZ
  Computes a sequence of values from the source sequence and the seed by repeatedly evaluating an iteration selector.
    0) source: The sequence to compute from, typically including an item name ('name: sequence').
    1) seed: The initial iteration value, typically including a name ('name: value').
    2) iteration_selector: The new iteration value computed from the current item of the sequence and the previous iteration value.
    3) result_selector: The result value computed from the iteration value and source item.
    [3, 4): Optional
Flags: __, min: 1, max: 1, Path: Sec
  Computes the secant of the specified angle in radians.
    0) angle: The angle, measured in radians.
Flags: __, min: 1, max: 1, Path: SecD
  Computes the secant of the specified angle in degrees.
    0) angle: The angle, measured in degrees.
Flags: __, min: 1, max: 1, Path: Sech
  Computes the hyperbolic secant of the specified value.
    0) value: The value.
Flags: __, min: 1, max: 3, Path: Sequence
Flags: __, min: 2, max: *, Path: SetFields
  Combines the source record with field definitions to produce a new record, with added, modified, renamed or removed fields.
    0) source: The source record or sequence of records.
    1) definition: A named value ('field_name: value'), defining a field in the result record. If 'value' is the name of a field in the source record, that field is renamed to 'field_name' in the result record. If 'value' is the 'null' literal, then 'field_name' is dropped from the result record.
    [1, 2): Repetitive, min count = 1
  Expanded Form
    0) source: The source record or sequence of records.
    1) definition1: A named value ('field_name: value'), defining a field in the result record. If 'value' is the name of a field in the source record, that field is renamed to 'field_name' in the result record. If 'value' is the 'null' literal, then 'field_name' is dropped from the result record.
    2) definition2: A named value ('field_name: value'), defining a field in the result record. If 'value' is the name of a field in the source record, that field is renamed to 'field_name' in the result record. If 'value' is the 'null' literal, then 'field_name' is dropped from the result record.
    [2, 3): Repetitive, min count = 0
Flags: __, min: 1, max: 1, Path: Sin
  Computes the sine of the specified angle in radians.
    0) angle: The angle, measured in radians.
Flags: __, min: 1, max: 1, Path: SinD
  Computes the sine of the specified angle in degrees.
    0) angle: The angle, measured in degrees.
Flags: __, min: 1, max: 1, Path: Sinh
  Computes the hyperbolic sine of the specified value.
    0) value: The value.
Flags: __, min: 1, max: *, Path: Sort
  Sorts the items of the sequence, by the selector value(s), using default order (up for text, down for other types).
    0) source: The sequence to sort. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
  Sorts the items of the sequence, by the selector value(s), using default order (up for text, down for other types).
    0) source: The sequence to sort.
    1) selector: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    [1, 2): Repetitive, min count = 1
  Expanded Form
    0) source: The sequence to sort.
    1) selector1: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    2) selector2: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    [2, 3): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: SortDown
  Sorts the items of the sequence, by the selector value(s), in large to small order.
    0) source: The sequence to sort. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
  Sorts the items of the sequence, by the selector value(s), in large to small order.
    0) source: The sequence to sort.
    1) selector: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    [1, 2): Repetitive, min count = 1
  Expanded Form
    0) source: The sequence to sort.
    1) selector1: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    2) selector2: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    [2, 3): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: SortUp
  Sorts the items of the sequence, by the selector value(s), in small to large order.
    0) source: The sequence to sort. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
  Sorts the items of the sequence, by the selector value(s), in small to large order.
    0) source: The sequence to sort.
    1) selector: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    [1, 2): Repetitive, min count = 1
  Expanded Form
    0) source: The sequence to sort.
    1) selector1: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    2) selector2: A value to sort on. May be prefixed with a sort directive: [up], [down], [<], [>], [~], [~up], [~down], [~<], [~>].
    [2, 3): Repetitive, min count = 0
Flags: __, min: 1, max: 1, Path: Sqrt
  Computes the square root of the specified number.
    0) value: The value.
Flags: __, min: 1, max: *, Path: Sum
  Computes the sum of the sequence.
    0) source: The sequence to sum.
  Computes the sum of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to sum.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to sum.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: SumBig
  Computes the sum of the sequence and produces the best precision result.
    0) source: The sequence to sum.
  Computes the sum of the selector value over items of the source sequence(s) and produces the best precision result.
    0) source: The source sequence.
    1) selector: The value to sum.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to sum.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: SumBigC
  Computes the sum of the sequence and produces the best precision result.
    0) source: The sequence to sum.
  Computes the sum of the selector value over items of the source sequence(s) and produces the best precision result.
    0) source: The source sequence.
    1) selector: The value to sum.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to sum.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: SumC
  Computes the sum of the sequence.
    0) source: The sequence to sum.
  Computes the sum of the selector value over items of the source sequence(s).
    0) source: The source sequence.
    1) selector: The value to sum.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to sum.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: SumK
  Computes the sum of the sequence using Kahan floating point compensation.
    0) source: The sequence to sum.
  Computes the sum of the selector value over items of the source sequence(s) using Kahan floating point compensation.
    0) source: The source sequence.
    1) selector: The value to sum.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to sum.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 1, max: *, Path: SumKC
  Computes the sum of the sequence using Kahan floating point compensation.
    0) source: The sequence to sum.
  Computes the sum of the selector value over items of the source sequence(s) using Kahan floating point compensation.
    0) source: The source sequence.
    1) selector: The value to sum.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: The source sequence.
    1) source2: The source sequence.
    2) selector: The value to sum.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 2, max: 3, Path: Take
  Takes the items of the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
  Takes the initial items contained in the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
  Takes the first 'count' items contained in the source sequence that satisfy the optional predicate.
    0) source: The source sequence.
    1) count: The number of items to take.
  Takes the first 'count' items contained in the source sequence that satisfy the optional predicate.
    0) source: The source sequence.
    1) count: The number of items to take.
    2) predicate: The condition with which to test an item.
  Takes the initial 'count' items contained in the source sequence that satisfy the [while] predicate.
    0) source: The source sequence.
    1) count: The number of items to take.
    2) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
Flags: __, min: 2, max: 3, Path: TakeAt
  Returns the item in the source sequence at the given index. If the index is invalid, returns a default value.
    0) source: The source sequence.
    1) index: The index of the desired item. Negative values index from the end of the sequence.
    2) else: The value to return if the index is invalid.
    [2, 3): Optional
Flags: __, min: 2, max: 2, Path: TakeIf
  Takes the items of the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
Flags: __, min: 1, max: 3, Path: TakeOne
  Returns the first item in the source sequence that satisfies the optional predicate. Otherwise returns a default value.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
    2) else: The value to return if the sequence is empty or no item satisfies the predicate.
    [1, 3): Optional
Flags: __, min: 2, max: 2, Path: TakeWhile
  Takes the initial items contained in the source sequence that satisfy the predicate.
    0) source: The source sequence.
    1) predicate: The condition with which to test an item.
Flags: __, min: 1, max: 1, Path: Tan
  Computes the tangent of the specified angle in radians.
    0) angle: The angle, measured in radians.
Flags: __, min: 1, max: 1, Path: TanD
  Computes the tangent of the specified angle in degrees.
    0) angle: The angle, measured in degrees.
Flags: __, min: 1, max: 1, Path: Tanh
  Computes the hyperbolic tangent of the specified value.
    0) value: The value.
Flags: __, min: 2, max: 2, Path: Tensor.Add
Flags: __, min: 4, max: *, Path: Tensor.Build
Flags: __, min: 2, max: 2, Path: Tensor.Div
Flags: __, min: 2, max: 2, Path: Tensor.Divide
Flags: __, min: 2, max: 2, Path: Tensor.Dot
Flags: __, min: 2, max: *, Path: Tensor.ExpandDims
Flags: __, min: 1, max: *, Path: Tensor.Fill
Flags: __, min: 2, max: *, Path: Tensor.ForEach
Flags: __, min: 1, max: *, Path: Tensor.From
Flags: __, min: 2, max: *, Path: Tensor.Map
Flags: __, min: 2, max: 2, Path: Tensor.Max
Flags: __, min: 2, max: 2, Path: Tensor.Min
Flags: __, min: 2, max: 2, Path: Tensor.Mul
Flags: __, min: 1, max: 1, Path: Tensor.Rank
Flags: __, min: 1, max: *, Path: Tensor.Reshape
Flags: __, min: 1, max: 1, Path: Tensor.Shape
Flags: __, min: 1, max: 1, Path: Tensor.SoftMax
Flags: __, min: 2, max: 2, Path: Tensor.Sub
Flags: __, min: 1, max: *, Path: Tensor.Transpose
Flags: __, min: 1, max: 1, Path: Tensor.Values
Flags: __, min: 2, max: *, Path: Tensor.Zip
Flags: __, min: 2, max: 2, Path: Text.Concat
  Concatenates the members of the sequence of text values using the specified seperator.
    0) source: The sequence of text values to concatenate.
    1) separator: The separator used for concatenation.
Flags: __, min: 2, max: 2, Path: Text.EndsWith
  Tests whether the end of the source text matches the lookup text.
    0) source: The text to look in.
    1) lookup: The text to look for.
Flags: __, min: 2, max: 4, Path: Text.IndexOf
  Returns the index of the first occurrence of the lookup text in the source text, within the optional range ['min_index', 'lim_index'). Returns -1 if not found.
    0) source: The text to look in.
    1) lookup: The text to look for.
    2) min_index: The minimum index of the search range.
    3) lim_index: The limit index of the search range.
    [2, 4): Optional
Flags: __, min: 2, max: 4, Path: Text.LastIndexOf
  Returns the index of the last occurrence of the lookup text in the source text, ending at the optional lim index. Returns -1 if not found.
    0) source: The text to look in.
    1) lookup: The text to look for.
    2) lim_index: The limit index of the search range.
    [2, 3): Optional
  Returns the index of the last occurrence of the lookup text in the source text, within the range ['min_index', 'lim_index'). Returns -1 if not found.
    0) source: The text to look in.
    1) lookup: The text to look for.
    2) min_index: The minimum index of the search range.
    3) lim_index: The limit index of the search range.
Flags: __, min: 1, max: 1, Path: Text.Len
  Returns the number of characters in the text value.
    0) source: The text in which to count the characters.
Flags: __, min: 1, max: 1, Path: Text.Lower
  Converts text to lowercase.
    0) source: The text to convert to lowercase.
Flags: __, min: 2, max: 3, Path: Text.Part
  Returns the segment of the source text starting and ending at the given indices.
    0) source: The source text containing the segment.
    1) min_index: The minimum index of the segment.
    2) lim_index: The limit index of the segment.
    [2, 3): Optional
Flags: __, min: 3, max: 3, Path: Text.Replace
  Replaces all instances of 'remove' with 'insert' in the text value 'source'.
    0) source: The text value to be searched.
    1) remove: The text value to search for and remove.
    2) insert: The text value to use in place of removed occurrences.
Flags: __, min: 2, max: 2, Path: Text.StartsWith
  Tests whether the beginning of the source text matches the lookup text.
    0) source: The text to look in.
    1) lookup: The text to look for.
Flags: __, min: 1, max: 1, Path: Text.Trim
  Trims leading and trailing whitespace characters from text.
    0) source: The text to trim.
Flags: __, min: 1, max: 1, Path: Text.TrimEnd
  Trims trailing whitespace characters from text.
    0) source: The text to trim.
Flags: __, min: 1, max: 1, Path: Text.TrimStart
  Trims leading whitespace characters from text.
    0) source: The text to trim.
Flags: __, min: 1, max: 1, Path: Text.Upper
  Converts text to uppercase.
    0) source: The text to convert to uppercase.
Flags: __, min: 1, max: 6, Path: Time
  Creates a Time value using the specified days, hours, minutes, seconds, milliseconds, and ticks.
    0) days: The days component of the Time.
    1) hours: The hours component of the Time.
    2) minutes: The minutes component of the Time.
    3) seconds: The seconds component of the Time.
    4) milliseconds: The milliseconds component of the Time.
    5) ticks: The ticks component of the Time.
    [1, 6): Optional
Flags: __, min: 1, max: 1, Path: Time.Day
  Extracts the day component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Hour
  Extracts the hour component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Hr
  Extracts the hour component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Millisecond
  Extracts the millisecond component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Min
  Extracts the minute component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Minute
  Extracts the minute component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Ms
  Extracts the millisecond component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Sec
  Extracts the second component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Second
  Extracts the second component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.Tick
  Extracts the tick component from the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotalDays
  Returns the whole and fractional days of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotalHours
  Returns the whole and fractional hours of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotalMilliseconds
  Returns the whole and fractional milliseconds of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotalMinutes
  Returns the whole and fractional minutes of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotalSeconds
  Returns the whole and fractional seconds of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotalTicks
  Returns the total ticks of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotDays
  Returns the whole and fractional days of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotHrs
  Returns the whole and fractional hours of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotMins
  Returns the whole and fractional minutes of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotMs
  Returns the whole and fractional milliseconds of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotSecs
  Returns the whole and fractional seconds of the Time value.
    0) value: The value to extract from.
Flags: __, min: 1, max: 1, Path: Time.TotTicks
  Returns the total ticks of the Time value.
    0) value: The value to extract from.
Flags: __, min: 2, max: 2, Path: To
  Converts the value to the type of the default value. Returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
Flags: __, min: 1, max: 1, Path: ToBase64
Flags: __, min: 1, max: 1, Path: ToDate
  Converts the value to Date, or returns null if not possible.
    0) value: The value to convert to Date.
Flags: __, min: 1, max: 1, Path: ToGuid
  Converts the value to Guid, or returns null if not possible.
    0) value: The value to convert to Guid.
Flags: __, min: 1, max: 2, Path: ToI1
  Converts the value to 1-byte int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToI2
  Converts the value to 2-byte int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToI4
  Converts the value to 4-byte int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToI8
  Converts the value to 8-byte int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToIA
  Converts the value to arbitrary precision integer, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToInt
  Converts the value to 8-byte int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToR4
  Converts the value to 4-byte float, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToR8
  Converts the value to 8-byte float, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToReal
  Converts the value to 8-byte float, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToShort
  Converts the value to 4-byte int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToText
  Converts the value to a text representation.
    0) value: The value to represent.
    1) format: The format to represent the value.
    [1, 2): Optional
Flags: __, min: 1, max: 1, Path: ToTime
  Converts the value to Time, or returns null if not possible.
    0) value: The value to convert to Time.
Flags: __, min: 1, max: 2, Path: ToU1
  Converts the value to 1-byte unsigned int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToU2
  Converts the value to 2-byte unsigned int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToU4
  Converts the value to 4-byte unsigned int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: ToU8
  Converts the value to 8-byte unsigned int, or returns the else value (or null) if not possible.
    0) value: The value to convert.
    1) default: The default value to return if the conversion is not possible.
    [1, 2): Optional
Flags: __, min: 1, max: 2, Path: TTest.OneSample
  Performs a one-sample t-test.
    0) x: The sample as a sequence of values.
    1) pop_mean: The hypothesized population mean. Defaults to 0.
    [1, 2): Optional
Flags: __, min: 2, max: 3, Path: TTest.Paired
  Performs a paired samples t-test, also known as a dependent or related samples t-test. If given samples of unequal length, the longer sample will be truncated to the length of the shorter sample.
    0) x: The first sample as a sequence of values.
    1) y: The second sample as a sequence of values.
  Performs a paired samples t-test, also known as a dependent or related samples t-test. Values in each sample are generated by evaluating selectors against the source sequence.
    0) source: The source sequence.
    1) x: Selector for each value in the first sample.
    2) y: Selector for each value in the second sample.
Flags: __, min: 2, max: 3, Path: TTest.TwoSample
  Performs a two-sample t-test, also known as an independent samples t-test.
    0) x: The first sample as a sequence of values.
    1) y: The second sample as a sequence of values.
    2) equal_var: Whether to assume equal population variances. If true, performs a standard Student's t-test. If false, performs a Welch's unequal variances t-test. Defaults to false.
    [2, 3): Optional
Flags: __, min: 1, max: 1, Path: Tuple.Item0
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item1
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item2
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item3
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item4
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item5
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item6
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item7
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item8
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Item9
  Extracts a slot value from a tuple
    0) source: The tuple from which to extract a slot value.
Flags: __, min: 1, max: 1, Path: Tuple.Len
  Returns the number of slots in a tuple.
    0) source: The source tuple.
Flags: __, min: 2, max: *, Path: With
  Evaluates selector in the context of definition(s).
    0) definition: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) definition1: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) definition2: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    2) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 2, max: *, Path: WithMap
  Evaluates selector in the context of definition(s).
    0) definition: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) definition1: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    1) definition2: An optionally named value ('name: value') in scope in subsequent definitions and in the selector.
    2) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 2, max: *, Path: Zip
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences. The length of the resulting sequence is the length of the shortest source sequence.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences that satisfies the [if] predicate.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [if] predicate: '[if]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
  Produces a value for each item from a source sequence or each set of corresponding items from multiple source sequences, as long as the [while] predicate is satisfied.
    0) source: A source sequence, optionally with an item name ('item_name: sequence').
    1) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    2) selector: The value to produce.
    [0, 1): Repetitive, min count = 1
  Expanded Form
    0) source1: A source sequence, optionally with an item name ('item_name: sequence').
    1) source2: A source sequence, optionally with an item name ('item_name: sequence').
    2) [while] predicate: '[while]' directive, followed by the condition with which to test an item.
    3) selector: The value to produce.
    [1, 2): Repetitive, min count = 0
Flags: __, min: 0, max: 0, Path: Foo
  User defined function.
Flags: __, min: 2, max: 2, Path: Bar
  Some custom description.
    0) x: Udf parameter.
    1) y: Udf parameter.
