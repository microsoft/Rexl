**** New definitions: R, type: i8*
**** New definitions: R1, type: i8*
**** New definitions: R0, type: i8*
**** New definitions: A, type: i8*
**** New definitions: A1, type: i8*
**** New definitions: S, type: i8*
**** New definitions: S1, type: i8*

> R->Reverse()
R->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Global(R)):i8*))
Func sig: (<ctx>:x, R:i8*) to i8*
Sequence: Seq<i8>
 0) 9
 1) 8
 2) 7
 3) 6
 4) 5
 5) 4
 6) 3
 7) 2
 8) 1
 9) 0
*** Ctx ping count: 0
###
> R->Reverse()->Wrap()->Reverse()
R->Reverse()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Global(R)):i8*)):i8*)):i8*))
Func sig: (<ctx>:x, R:i8*) to i8*
Sequence: Seq<i8>
 0) 0
 1) 1
 2) 2
 3) 3
 4) 4
 5) 5
 6) 6
 7) 7
 8) 8
 9) 9
*** Ctx ping count: 0
###
> R->Reverse()->Wrap()->Reverse()->Wrap()->Reverse()
R->Reverse()->Wrap()->Reverse()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Global(R)):i8*)):i8*)):i8*)):i8*)):i8*))
Func sig: (<ctx>:x, R:i8*) to i8*
Sequence: Seq<i8>
 0) 9
 1) 8
 2) 7
 3) 6
 4) 5
 5) 4
 6) 3
 7) 2
 8) 1
 9) 0
*** Ctx ping count: 0
###
> R->Null()->Wrap()->Reverse()
R->Null()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(null:i8*):i8*)):i8*))
Func sig: (<ctx>:x) to i8*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> A->Reverse()
A->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Global(A)):i8*))
Func sig: (<ctx>:x, A:i8*) to i8*
Sequence: Seq<i8>
 0) 1
 1) 4
 2) 6
 3) 2
 4) 8
 5) 3
*** Ctx ping count: 0
###
> A->Reverse()->Wrap()->Reverse()
A->Reverse()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Global(A)):i8*)):i8*)):i8*))
Func sig: (<ctx>:x, A:i8*) to i8*
Sequence: Seq<i8>
 0) 3
 1) 8
 2) 2
 3) 6
 4) 4
 5) 1
*** Ctx ping count: 0
###
> A->Reverse()->Wrap()->Reverse()->Wrap()->Reverse()
A->Reverse()->Wrap()->Reverse()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Global(A)):i8*)):i8*)):i8*)):i8*)):i8*))
Func sig: (<ctx>:x, A:i8*) to i8*
Sequence: Seq<i8>
 0) 1
 1) 4
 2) 6
 3) 2
 4) 8
 5) 3
*** Ctx ping count: 0
###
> A->Null()->Wrap()->Reverse()
A->Null()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(null:i8*):i8*)):i8*))
Func sig: (<ctx>:x) to i8*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> S->Reverse()
S->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Global(S)):i8*))
Func sig: (<ctx>:x, S:i8*) to i8*
Sequence: Seq<i8>
 0) 85
 1) 68
 2) 51
 3) 34
 4) 17
 5) 0
*** Ctx ping count: 7
    [0](7): Reverse(S)
###
> S->Reverse()->Wrap()->Reverse()
S->Reverse()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Global(S)):i8*)):i8*)):i8*))
Func sig: (<ctx>:x, S:i8*) to i8*
Sequence: Seq<i8>
 0) 0
 1) 17
 2) 34
 3) 51
 4) 68
 5) 85
*** Ctx ping count: 0
###
> S->Reverse()->Wrap()->Reverse()->Wrap()->Reverse()
S->Reverse()->Wrap()->Reverse()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Call(∂.Test.Wrap(Call(∂.Reverse(Global(S)):i8*)):i8*)):i8*)):i8*)):i8*))
Func sig: (<ctx>:x, S:i8*) to i8*
Sequence: Seq<i8>
 0) 85
 1) 68
 2) 51
 3) 34
 4) 17
 5) 0
*** Ctx ping count: 0
###
> S->Null()->Wrap()->Reverse()
S->Null()->Wrap()->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Call(∂.Test.Wrap(null:i8*):i8*)):i8*))
Func sig: (<ctx>:x) to i8*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> R1->Reverse()
R1->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Global(R1)):i8*))
Func sig: (<ctx>:x, R1:i8*) to i8*
Sequence: Seq<i8>
 0) 0
*** Ctx ping count: 0
###
> R0->Reverse()
R0->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Global(R0)):i8*))
Func sig: (<ctx>:x, R0:i8*) to i8*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> A1->Reverse()
A1->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Global(A1)):i8*))
Func sig: (<ctx>:x, A1:i8*) to i8*
Sequence: Seq<i8>
 0) 17
*** Ctx ping count: 0
###
> S1->Reverse()
S1->Reverse() : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Reverse(Global(S1)):i8*))
Func sig: (<ctx>:x, S1:i8*) to i8*
Sequence: Seq<i8>
 0) 0
*** Ctx ping count: 1
    [0](1): Reverse(S1)
###
> R->Reverse()->Count()
R->Reverse()->Count() : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Count(Call(∂.Reverse(Global(R)):i8*)):i8))
Func sig: (<ctx>:x, R:i8*) to i8
Type: i8, Value: 10
*** Ctx ping count: 0
###
> A->Reverse()->Count()
A->Reverse()->Count() : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Count(Call(∂.Reverse(Global(A)):i8*)):i8))
Func sig: (<ctx>:x, A:i8*) to i8
Type: i8, Value: 6
*** Ctx ping count: 0
###
> S->Reverse()->Count()
S->Reverse()->Count() : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Count(Call(∂.Reverse(Global(S)):i8*)):i8))
Func sig: (<ctx>:x, S:i8*) to i8
Type: i8, Value: 6
*** Ctx ping count: 0
###
