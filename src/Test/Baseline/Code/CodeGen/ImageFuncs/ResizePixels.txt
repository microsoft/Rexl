**** New udf: MakeU1, arity: 3
**** New udf: U4, arity: 2
**** New udf: MakeU4, arity: 2

> With(t:MakeU1( 1,  1, 4), r:t->ResizePixels( 2), (t, r))
With(t : MakeU1(1, 1, 4), r : t->ResizePixels(2), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(4:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 1:i8, 1:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 2:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(1,1,4)<0,0,1>
      [[[0, 1, 2, 3]]]
  ,
    Ten<u1>(2,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [0, 1, 2, 3]]

       [[0, 1, 2, 3]
        [0, 1, 2, 3]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1( 3,  2, 4), r:t->ResizePixels( 6), (t, r))
With(t : MakeU1(3, 2, 4), r : t->ResizePixels(6), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(24:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 3:i8, 2:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 6:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(3,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]]

       [[8, 9, A, B]
        [C, D, E, F]]

       [[10, 11, 12, 13]
        [14, 15, 16, 17]]]
  ,
    Ten<u1>(9,6,4)<24,4,1>
      [[[0, 1, 2, 3]
        [0, 1, 2, 3]
        [1, 2, 3, 4]
        [2, 3, 4, 5]
        [4, 5, 6, 7]
        [4, 5, 6, 7]]

       [[0, 1, 2, 3]
        [1, 2, 3, 4]
        [2, 3, 4, 5]
        [3, 4, 5, 6]
        [4, 5, 6, 7]
        [5, 6, 7, 8]]

       [[2, 3, 4, 5]
        [3, 4, 5, 6]
        [4, 5, 6, 7]
        [5, 6, 7, 8]
        [6, 7, 8, 9]
        [7, 8, 9, A]]

       [[5, 6, 7, 8]
        [5, 6, 7, 8]
        [6, 7, 8, 9]
        [8, 9, A, B]
        [9, A, B, C]
        [9, A, B, C]]

       [[8, 9, A, B]
        [8, 9, A, B]
        [9, A, B, C]
        [B, C, D, E]
        [C, D, E, F]
        [C, D, E, F]]

       [[B, C, D, E]
        [B, C, D, E]
        [C, D, E, F]
        [E, F, 10, 11]
        [F, 10, 11, 12]
        [F, 10, 11, 12]]

       [[D, E, F, 10]
        [E, F, 10, 11]
        [F, 10, 11, 12]
        [10, 11, 12, 13]
        [11, 12, 13, 14]
        [12, 13, 14, 15]]

       [[F, 10, 11, 12]
        [10, 11, 12, 13]
        [11, 12, 13, 14]
        [12, 13, 14, 15]
        [13, 14, 15, 16]
        [14, 15, 16, 17]]

       [[10, 11, 12, 13]
        [10, 11, 12, 13]
        [...]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1( 3,  2, 4), r:t->ResizePixels( 2), (t, r))
With(t : MakeU1(3, 2, 4), r : t->ResizePixels(2), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(24:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 3:i8, 2:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 2:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(3,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]]

       [[8, 9, A, B]
        [C, D, E, F]]

       [[10, 11, 12, 13]
        [14, 15, 16, 17]]]
  ,
    Ten<u1>(3,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]]

       [[8, 9, A, B]
        [C, D, E, F]]

       [[10, 11, 12, 13]
        [14, 15, 16, 17]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1(10, 20, 4), r:t->ResizePixels( 5), (t, r))
With(t : MakeU1(10, 20, 4), r : t->ResizePixels(5), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(800:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 10:i8, 20:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 5:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(10,20,4)<80,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]
        [8, 9, A, B]
        [C, D, E, F]
        [10, 11, 12, 13]
        [14, 15, 16, 17]
        [18, 19, 1A, 1B]
        [1C, 1D, 1E, 1F]
        [20, 21, 22, 23]
        [24, 25, 26, 27]
        [28, 29, 2A, 2B]
        [2C, 2D, 2E, 2F]
        [30, 31, 32, 33]
        [34, 35, 36, 37]
        [38, 39, 3A, 3B]
        [3C, 3D, 3E, 3F]
        [40, 41, 42, 43]
        [44, 45, 46, 47]
        [48, 49, 4A, 4B]
        [4C, 4D, 4E, 4F]]

       [[50, 51, 52, 53]
        [54, 55, 56, 57]
        [58, 59, 5A, 5B]
        [5C, 5D, 5E, 5F]
        [60, 61, 62, 63]
        [64, 65, 66, 67]
        [68, 69, 6A, 6B]
        [6C, 6D, 6E, 6F]
        [70, 71, 72, 73]
        [74, 75, 76, 77]
        [78, 79, 7A, 7B]
        [7C, 7D, 7E, 7F]
        [80, 81, 82, 83]
        [84, 85, 86, 87]
        [88, 89, 8A, 8B]
        [8C, 8D, 8E, 8F]
        [90, 91, 92, 93]
        [94, 95, 96, 97]
        [98, 99, 9A, 9B]
        [9C, 9D, 9E, 9F]]

       [[A0, A1, A2, A3]
        [A4, A5, A6, A7]
        [A8, A9, AA, AB]
        [AC, AD, AE, AF]
        [B0, B1, B2, B3]
        [B4, B5, B6, B7]
        [B8, B9, BA, BB]
        [BC, BD, BE, BF]
        [C0, C1, C2, C3]
        [C4, C5, C6, C7]
        [...]]]
  ,
    Ten<u1>(5,10,4)<40,4,1>
      [[[2A, 2B, 2C, 2D]
        [32, 33, 34, 35]
        [3A, 3B, 3C, 3D]
        [42, 43, 44, 45]
        [4A, 4B, 4C, 4D]
        [52, 53, 54, 55]
        [5A, 5B, 5C, 5D]
        [62, 63, 64, 65]
        [6A, 6B, 6C, 6D]
        [72, 73, 74, 75]]

       [[CA, CB, CC, CD]
        [D2, D3, D4, D5]
        [5A, 5B, 5C, 5D]
        [62, 63, 64, 65]
        [6A, 6B, 6C, 6D]
        [72, 73, 74, 75]
        [7A, 7B, 7C, 7D]
        [82, 83, 84, 85]
        [8A, 8B, 8C, 8D]
        [92, 93, 94, 95]]

       [[6A, 6B, 6C, 6D]
        [72, 73, 74, 75]
        [7A, 7B, 7C, 7D]
        [82, 83, 84, 85]
        [8A, 8B, 8C, 8D]
        [92, 93, 94, 95]
        [9A, 9B, 9C, 9D]
        [A2, A3, A4, A5]
        [AA, AB, AC, AD]
        [B2, B3, B4, B5]]

       [[8A, 8B, 8C, 8D]
        [92, 93, 94, 95]
        [9A, 9B, 9C, 9D]
        [A2, A3, A4, A5]
        [2A, 2B, 2C, 2D]
        [32, 33, 34, 35]
        [3A, 3B, 3C, 3D]
        [42, 43, 44, 45]
        [4A, 4B, 4C, 4D]
        [52, 53, 54, 55]]

       [[AA, AB, AC, AD]
        [B2, B3, B4, B5]
        [BA, BB, BC, BD]
        [C2, C3, C4, C5]
        [CA, CB, CC, CD]
        [D2, D3, D4, D5]
        [5A, 5B, 5C, 5D]
        [62, 63, 64, 65]
        [6A, 6B, 6C, 6D]
        [72, 73, 74, 75]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1( 0, 20, 4), r:t->ResizePixels( 0), (t, r))
With(t : MakeU1(0, 20, 4), r : t->ResizePixels(0), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u1[0,20,4], (Scope(1), Call(∂.ResizePixels(Scope(1), 0:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: () to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(0,20,4)<0,0,0> [],
    <null>)
###
> With(t:MakeU1(10,  0, 4), r:t->ResizePixels(10), (t, r))
With(t : MakeU1(10, 0, 4), r : t->ResizePixels(10), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u1[10,0,4], (Scope(1), Call(∂.ResizePixels(Scope(1), 10:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: () to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(10,0,4)<0,0,0> [],
    <null>)
###
> With(t:MakeU1(10, 20, 3), r:t->ResizePixels( 5), (t, r))
With(t : MakeU1(10, 20, 3), r : t->ResizePixels(5), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(600:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 10:i8, 20:i8, 3:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 5:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(10,20,3)<60,3,1>
      [[[0, 1, 2]
        [3, 4, 5]
        [6, 7, 8]
        [9, A, B]
        [C, D, E]
        [F, 10, 11]
        [12, 13, 14]
        [15, 16, 17]
        [18, 19, 1A]
        [1B, 1C, 1D]
        [1E, 1F, 20]
        [21, 22, 23]
        [24, 25, 26]
        [27, 28, 29]
        [2A, 2B, 2C]
        [2D, 2E, 2F]
        [30, 31, 32]
        [33, 34, 35]
        [36, 37, 38]
        [39, 3A, 3B]]

       [[3C, 3D, 3E]
        [3F, 40, 41]
        [42, 43, 44]
        [45, 46, 47]
        [48, 49, 4A]
        [4B, 4C, 4D]
        [4E, 4F, 50]
        [51, 52, 53]
        [54, 55, 56]
        [57, 58, 59]
        [5A, 5B, 5C]
        [5D, 5E, 5F]
        [60, 61, 62]
        [63, 64, 65]
        [66, 67, 68]
        [69, 6A, 6B]
        [6C, 6D, 6E]
        [6F, 70, 71]
        [72, 73, 74]
        [75, 76, 77]]

       [[78, 79, 7A]
        [7B, 7C, 7D]
        [7E, 7F, 80]
        [81, 82, 83]
        [84, 85, 86]
        [87, 88, 89]
        [8A, 8B, 8C]
        [8D, 8E, 8F]
        [90, 91, 92]
        [93, 94, 95]
        [96, 97, 98]
        [99, 9A, 9B]
        [9C, 9D, 9E]
        [9F, A0, A1]
        [A2, A3, A4]
        [A5, A6, A7]
        [A8, A9, AA]
        [AB, AC, AD]
        [AE, AF, B0]
        [B1, B2, B3]]

       [[B4, B5, B6]
        [B7, B8, B9]
        [BA, BB, BC]
        [BD, BE, BF]
        [C0, C1, C2]
        [C3, C4, C5]
        [C6, C7, ...]]]
  ,
    <null>)
*** Ctx ping count: 0
###
> With(t:MakeU4( 1,  1), r:t->ResizePixels( 2), (t, r))
With(t : MakeU4(1, 1), r : t->ResizePixels(2), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:3] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(1:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 1:i8, 1:i8):u4[*,*]), (Scope(3), Call(∂.ResizePixels(Scope(3), 2:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(1,1)<0,0>
      [[4030201]]
  ,
    Ten<u4>(2,2)<2,1>
      [[4030201, 4030201]
       [4030201, 4030201]]
)
*** Ctx ping count: 0
###
> With(t:MakeU4( 3,  2), r:t->ResizePixels( 6), (t, r))
With(t : MakeU4(3, 2), r : t->ResizePixels(6), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:3] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(6:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 3:i8, 2:i8):u4[*,*]), (Scope(3), Call(∂.ResizePixels(Scope(3), 6:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(3,2)<2,1>
      [[4030201, 8070605]
       [C0B0A09, 100F0E0D]
       [14131211, 18171615]]
  ,
    Ten<u4>(9,6)<6,1>
      [[4030201, 4030201, 5040302, 6050403, 8070605, 8070605]
       [4030201, 5040302, 6050403, 7060504, 8070605, 9080706]
       [6050403, 7060504, 8070605, 9080706, A090807, B0A0908]
       [9080706, 9080706, A090807, C0B0A09, D0C0B0A, D0C0B0A]
       [C0B0A09, C0B0A09, D0C0B0A, F0E0D0C, 100F0E0D, 100F0E0D]
       [F0E0D0C, F0E0D0C, 100F0E0D, 1211100F, 13121110, 13121110]
       [11100F0E, 1211100F, 13121110, 14131211, 15141312, 16151413]
       [13121110, 14131211, 15141312, 16151413, 17161514, 18171615]
       [14131211, 14131211, 16151413, 17161514, 18171615, 18171615]]
)
*** Ctx ping count: 0
###
> With(t:MakeU4(10, 20), r:t->ResizePixels( 5), (t, r))
With(t : MakeU4(10, 20), r : t->ResizePixels(5), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:3] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(200:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 10:i8, 20:i8):u4[*,*]), (Scope(3), Call(∂.ResizePixels(Scope(3), 5:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(10,20)<20,1>
      [[4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D, 24232221, 28272625, 2C2B2A29, 302F2E2D, 34333231, 38373635, 3C3B3A39, 403F3E3D, 44434241, 48474645, 4C4B4A49, 504F4E4D]
       [54535251, 58575655, 5C5B5A59, 605F5E5D, 64636261, 68676665, 6C6B6A69, 706F6E6D, 74737271, 78777675, 7C7B7A79, 807F7E7D, 84838281, 88878685, 8C8B8A89, 908F8E8D, 94939291, 98979695, 9C9B9A99, A09F9E9D]
       [A4A3A2A1, A8A7A6A5, ACABAAA9, B0AFAEAD, B4B3B2B1, B8B7B6B5, BCBBBAB9, C0BFBEBD, C4C3C2C1, C8C7C6C5, CCCBCAC9, D0CFCECD, D4D3D2D1, D8D7D6D5, DCDBDAD9, E0DFDEDD, E4E3E2E1, E8E7E6E5, ECEBEAE9, F0EFEEED]
       [F4F3F2F1, F8F7F6F5, FCFBFAF9, FFFEFD, 4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D, 24232221, 28272625, 2C2B2A29, 302F2E2D, 34333231, 38373635, 3C3B3A39, 403F3E3D]
       [44434241, 48474645, 4C4B4A49, 504F4E4D, 54535251, 58575655, 5C5B5A59, 605F5E5D, 64636261, 68676665, 6C6B6A69, 706F6E6D, 74737271, 78777675, 7C7B7A79, 807F7E7D, 84838281, 88878685, 8C8B8A89, 908F8E8D]
       [94939291, 98979695, 9C9B9A99, A09F9E9D, A4A3A2A1, A8A7A6A5, ACABAAA9, B0AFAEAD, B4B3B2B1, B8B7B6B5, BCBBBAB9, C0BFBEBD, C4C3C2C1, C8C7C6C5, CCCBCAC9, D0CFCECD, D4D3D2D1, D8D7D6D5, DCDBDAD9, E0DFDEDD]
       [E4E3E2E1, E8E7E6E5, ECEBEAE9, F0EFEEED, F4F3F2F1, F8F7F6F5, FCFBFAF9, FFFEFD, 4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D, 24232221, 28272625, 2C2B2A29, 302F2E2D]
       [34333231, 38373635, 3C3B3A39, 403F3E3D, 44434241, 48474645, 4C4B4A49, 504F4E4D, 54535251, 58575655, 5C5B5A59, 605F5E5D, 64636261, 68676665, 6C6B6A69, 706F6E6D, 74737271, 78777675, 7C7B7A79, 807F7E7D]
       [84838281, 88878685, 8C8B8A89, 908F8E8D, 94939291, 98979695, 9C9B9A99, A09F9E9D, A4A3A2A1, A8A7A6A5, ACABAAA9, B0AFAEAD, B4B3B2B1, B8B7B6B5, BCBBBAB9, C0BFBEBD, C4C3C2C1, C8C7C6C5, CCCBCAC9, D0CFCECD]
       [D4D3D2D1, D8D7D6D5, DCDBDAD9, E0DFDEDD, E4E3E2E1, E8E7E6E5, ECEBEAE9, F0EFEEED, F4F3F2F1, F8F7F6F5, FCFBFAF9, FFFEFD, 4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D]]
  ,
    Ten<u4>(5,10)<10,1>
      [[2E2D2C2B, 36353433, 3E3D3C3B, 46454443, 4E4D4C4B, 56555453, 5E5D5C5B, 66656463, 6E6D6C6B, 76757473]
       [CECDCCCB, 96D5D4D3, 5E5D5C5B, 66656463, 6E6D6C6B, 76757473, 7E7D7C7B, 86858483, 8E8D8C8B, 96959493]
       [6E6D6C6B, 76757473, 7E7D7C7B, 86858483, 8E8D8C8B, 96959493, 9E9D9C9B, A6A5A4A3, AEADACAB, B6B5B4B3]
       [8E8D8C8B, 96959493, 9E9D9C9B, 66A5A4A3, 2E2D2C2B, 36353433, 3E3D3C3B, 46454443, 4E4D4C4B, 56555453]
       [AEADACAB, B6B5B4B3, BEBDBCBB, C6C5C4C3, CECDCCCB, 96D5D4D3, 5E5D5C5B, 66656463, 6E6D6C6B, 76757473]]
)
*** Ctx ping count: 0
###
> With(t:MakeU4( 0, 20), r:t->ResizePixels( 0), (t, r))
With(t : MakeU4(0, 20), r : t->ResizePixels(0), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u4[0,20], (Scope(1), Call(∂.ResizePixels(Scope(1), 0:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: () to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(0,20)<0,0> [],
    <null>)
###
> With(t:MakeU4(10,  0), r:t->ResizePixels(10), (t, r))
With(t : MakeU4(10, 0), r : t->ResizePixels(10), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u4[10,0], (Scope(1), Call(∂.ResizePixels(Scope(1), 10:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: () to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(10,0)<0,0> [],
    <null>)
###
> With(t:MakeU1( 1,  1, 4), r:t->ResizePixels( 2,  1), (t, r))
With(t : MakeU1(1, 1, 4), r : t->ResizePixels(2, 1), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(4:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 1:i8, 1:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 2:i8, 1:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(1,1,4)<0,0,1>
      [[[0, 1, 2, 3]]]
  ,
    Ten<u1>(2,1,4)<4,0,1>
      [[[0, 1, 2, 3]]

       [[0, 1, 2, 3]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1( 3,  2, 4), r:t->ResizePixels( 6,  2), (t, r))
With(t : MakeU1(3, 2, 4), r : t->ResizePixels(6, 2), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(24:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 3:i8, 2:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 6:i8, 2:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(3,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]]

       [[8, 9, A, B]
        [C, D, E, F]]

       [[10, 11, 12, 13]
        [14, 15, 16, 17]]]
  ,
    Ten<u1>(6,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]]

       [[2, 3, 4, 5]
        [6, 7, 8, 9]]

       [[6, 7, 8, 9]
        [A, B, C, D]]

       [[A, B, C, D]
        [E, F, 10, 11]]

       [[E, F, 10, 11]
        [12, 13, 14, 15]]

       [[10, 11, 12, 13]
        [14, 15, 16, 17]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1(10, 20, 4), r:t->ResizePixels( 5,  5), (t, r))
With(t : MakeU1(10, 20, 4), r : t->ResizePixels(5, 5), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(800:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 10:i8, 20:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 5:i8, 5:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(10,20,4)<80,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]
        [8, 9, A, B]
        [C, D, E, F]
        [10, 11, 12, 13]
        [14, 15, 16, 17]
        [18, 19, 1A, 1B]
        [1C, 1D, 1E, 1F]
        [20, 21, 22, 23]
        [24, 25, 26, 27]
        [28, 29, 2A, 2B]
        [2C, 2D, 2E, 2F]
        [30, 31, 32, 33]
        [34, 35, 36, 37]
        [38, 39, 3A, 3B]
        [3C, 3D, 3E, 3F]
        [40, 41, 42, 43]
        [44, 45, 46, 47]
        [48, 49, 4A, 4B]
        [4C, 4D, 4E, 4F]]

       [[50, 51, 52, 53]
        [54, 55, 56, 57]
        [58, 59, 5A, 5B]
        [5C, 5D, 5E, 5F]
        [60, 61, 62, 63]
        [64, 65, 66, 67]
        [68, 69, 6A, 6B]
        [6C, 6D, 6E, 6F]
        [70, 71, 72, 73]
        [74, 75, 76, 77]
        [78, 79, 7A, 7B]
        [7C, 7D, 7E, 7F]
        [80, 81, 82, 83]
        [84, 85, 86, 87]
        [88, 89, 8A, 8B]
        [8C, 8D, 8E, 8F]
        [90, 91, 92, 93]
        [94, 95, 96, 97]
        [98, 99, 9A, 9B]
        [9C, 9D, 9E, 9F]]

       [[A0, A1, A2, A3]
        [A4, A5, A6, A7]
        [A8, A9, AA, AB]
        [AC, AD, AE, AF]
        [B0, B1, B2, B3]
        [B4, B5, B6, B7]
        [B8, B9, BA, BB]
        [BC, BD, BE, BF]
        [C0, C1, C2, C3]
        [C4, C5, C6, C7]
        [...]]]
  ,
    Ten<u1>(5,5,4)<20,4,1>
      [[[8E, 8F, 90, 91]
        [5E, 5F, 60, 61]
        [6E, 6F, 70, 71]
        [7E, 7F, 80, 81]
        [8E, 8F, 90, 91]]

       [[8E, 8F, 90, 91]
        [64, 65, 66, 67]
        [6E, 6F, 70, 71]
        [7B, 7C, 7D, 7E]
        [8B, 8C, 8D, 8E]]

       [[8E, 8F, 90, 91]
        [7E, 7F, 80, 81]
        [6E, 6F, 70, 71]
        [6E, 6F, 70, 71]
        [7E, 7F, 80, 81]]

       [[8E, 8F, 90, 91]
        [98, 99, 9A, 9B]
        [6E, 6F, 70, 71]
        [61, 62, 63, 64]
        [71, 72, 73, 74]]

       [[8E, 8F, 90, 91]
        [9E, 9F, A0, A1]
        [6E, 6F, 70, 71]
        [5E, 5F, 60, 61]
        [6E, 6F, 70, 71]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1( 0, 20, 4), r:t->ResizePixels(10,  0), (t, r))
With(t : MakeU1(0, 20, 4), r : t->ResizePixels(10, 0), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u1[0,20,4], (Scope(1), Call(∂.ResizePixels(Scope(1), 10:i8, 0:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: () to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(0,20,4)<0,0,0> [],
    <null>)
###
> With(t:MakeU1(10,  0, 4), r:t->ResizePixels( 0, 10), (t, r))
With(t : MakeU1(10, 0, 4), r : t->ResizePixels(0, 10), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u1[10,0,4], (Scope(1), Call(∂.ResizePixels(Scope(1), 0:i8, 10:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: () to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(10,0,4)<0,0,0> [],
    <null>)
###
> With(t:MakeU1(10, 20, 3), r:t->ResizePixels( 5, 5), (t, r))
With(t : MakeU1(10, 20, 3), r : t->ResizePixels(5, 5), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(600:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 10:i8, 20:i8, 3:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 5:i8, 5:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(10,20,3)<60,3,1>
      [[[0, 1, 2]
        [3, 4, 5]
        [6, 7, 8]
        [9, A, B]
        [C, D, E]
        [F, 10, 11]
        [12, 13, 14]
        [15, 16, 17]
        [18, 19, 1A]
        [1B, 1C, 1D]
        [1E, 1F, 20]
        [21, 22, 23]
        [24, 25, 26]
        [27, 28, 29]
        [2A, 2B, 2C]
        [2D, 2E, 2F]
        [30, 31, 32]
        [33, 34, 35]
        [36, 37, 38]
        [39, 3A, 3B]]

       [[3C, 3D, 3E]
        [3F, 40, 41]
        [42, 43, 44]
        [45, 46, 47]
        [48, 49, 4A]
        [4B, 4C, 4D]
        [4E, 4F, 50]
        [51, 52, 53]
        [54, 55, 56]
        [57, 58, 59]
        [5A, 5B, 5C]
        [5D, 5E, 5F]
        [60, 61, 62]
        [63, 64, 65]
        [66, 67, 68]
        [69, 6A, 6B]
        [6C, 6D, 6E]
        [6F, 70, 71]
        [72, 73, 74]
        [75, 76, 77]]

       [[78, 79, 7A]
        [7B, 7C, 7D]
        [7E, 7F, 80]
        [81, 82, 83]
        [84, 85, 86]
        [87, 88, 89]
        [8A, 8B, 8C]
        [8D, 8E, 8F]
        [90, 91, 92]
        [93, 94, 95]
        [96, 97, 98]
        [99, 9A, 9B]
        [9C, 9D, 9E]
        [9F, A0, A1]
        [A2, A3, A4]
        [A5, A6, A7]
        [A8, A9, AA]
        [AB, AC, AD]
        [AE, AF, B0]
        [B1, B2, B3]]

       [[B4, B5, B6]
        [B7, B8, B9]
        [BA, BB, BC]
        [BD, BE, BF]
        [C0, C1, C2]
        [C3, C4, C5]
        [C6, C7, ...]]]
  ,
    <null>)
*** Ctx ping count: 0
###
> With(t:MakeU4( 1,  1), r:t->ResizePixels( 2,  1), (t, r))
With(t : MakeU4(1, 1), r : t->ResizePixels(2, 1), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:3] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(1:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 1:i8, 1:i8):u4[*,*]), (Scope(3), Call(∂.ResizePixels(Scope(3), 2:i8, 1:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(1,1)<0,0>
      [[4030201]]
  ,
    Ten<u4>(2,1)<1,0>
      [[4030201]
       [4030201]]
)
*** Ctx ping count: 0
###
> With(t:MakeU4( 3,  2), r:t->ResizePixels( 6,  2), (t, r))
With(t : MakeU4(3, 2), r : t->ResizePixels(6, 2), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:3] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(6:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 3:i8, 2:i8):u4[*,*]), (Scope(3), Call(∂.ResizePixels(Scope(3), 6:i8, 2:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(3,2)<2,1>
      [[4030201, 8070605]
       [C0B0A09, 100F0E0D]
       [14131211, 18171615]]
  ,
    Ten<u4>(6,2)<2,1>
      [[4030201, 8070605]
       [6050403, A090807]
       [A090807, E0D0C0B]
       [E0D0C0B, 1211100F]
       [1211100F, 16151413]
       [14131211, 18171615]]
)
*** Ctx ping count: 0
###
> With(t:MakeU4(10, 20), r:t->ResizePixels( 5,  5), (t, r))
With(t : MakeU4(10, 20), r : t->ResizePixels(5, 5), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:3] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(200:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 10:i8, 20:i8):u4[*,*]), (Scope(3), Call(∂.ResizePixels(Scope(3), 5:i8, 5:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(10,20)<20,1>
      [[4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D, 24232221, 28272625, 2C2B2A29, 302F2E2D, 34333231, 38373635, 3C3B3A39, 403F3E3D, 44434241, 48474645, 4C4B4A49, 504F4E4D]
       [54535251, 58575655, 5C5B5A59, 605F5E5D, 64636261, 68676665, 6C6B6A69, 706F6E6D, 74737271, 78777675, 7C7B7A79, 807F7E7D, 84838281, 88878685, 8C8B8A89, 908F8E8D, 94939291, 98979695, 9C9B9A99, A09F9E9D]
       [A4A3A2A1, A8A7A6A5, ACABAAA9, B0AFAEAD, B4B3B2B1, B8B7B6B5, BCBBBAB9, C0BFBEBD, C4C3C2C1, C8C7C6C5, CCCBCAC9, D0CFCECD, D4D3D2D1, D8D7D6D5, DCDBDAD9, E0DFDEDD, E4E3E2E1, E8E7E6E5, ECEBEAE9, F0EFEEED]
       [F4F3F2F1, F8F7F6F5, FCFBFAF9, FFFEFD, 4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D, 24232221, 28272625, 2C2B2A29, 302F2E2D, 34333231, 38373635, 3C3B3A39, 403F3E3D]
       [44434241, 48474645, 4C4B4A49, 504F4E4D, 54535251, 58575655, 5C5B5A59, 605F5E5D, 64636261, 68676665, 6C6B6A69, 706F6E6D, 74737271, 78777675, 7C7B7A79, 807F7E7D, 84838281, 88878685, 8C8B8A89, 908F8E8D]
       [94939291, 98979695, 9C9B9A99, A09F9E9D, A4A3A2A1, A8A7A6A5, ACABAAA9, B0AFAEAD, B4B3B2B1, B8B7B6B5, BCBBBAB9, C0BFBEBD, C4C3C2C1, C8C7C6C5, CCCBCAC9, D0CFCECD, D4D3D2D1, D8D7D6D5, DCDBDAD9, E0DFDEDD]
       [E4E3E2E1, E8E7E6E5, ECEBEAE9, F0EFEEED, F4F3F2F1, F8F7F6F5, FCFBFAF9, FFFEFD, 4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D, 24232221, 28272625, 2C2B2A29, 302F2E2D]
       [34333231, 38373635, 3C3B3A39, 403F3E3D, 44434241, 48474645, 4C4B4A49, 504F4E4D, 54535251, 58575655, 5C5B5A59, 605F5E5D, 64636261, 68676665, 6C6B6A69, 706F6E6D, 74737271, 78777675, 7C7B7A79, 807F7E7D]
       [84838281, 88878685, 8C8B8A89, 908F8E8D, 94939291, 98979695, 9C9B9A99, A09F9E9D, A4A3A2A1, A8A7A6A5, ACABAAA9, B0AFAEAD, B4B3B2B1, B8B7B6B5, BCBBBAB9, C0BFBEBD, C4C3C2C1, C8C7C6C5, CCCBCAC9, D0CFCECD]
       [D4D3D2D1, D8D7D6D5, DCDBDAD9, E0DFDEDD, E4E3E2E1, E8E7E6E5, ECEBEAE9, F0EFEEED, F4F3F2F1, F8F7F6F5, FCFBFAF9, FFFEFD, 4030201, 8070605, C0B0A09, 100F0E0D, 14131211, 18171615, 1C1B1A19, 201F1E1D]]
  ,
    Ten<u4>(5,5)<5,1>
      [[8291908F, 6261605F, 7271706F, 8281807F, 9291908F]
       [8491908F, 67676665, 7171706F, 7F7E7D7C, 8F8E8D8C]
       [8A91908F, 7A81807F, 6E71706F, 7271706F, 8281807F]
       [9091908F, 8D9B9A99, 6B71706F, 65646362, 75747372]
       [9291908F, 92A1A09F, 6A71706F, 6261605F, 7271706F]]
)
*** Ctx ping count: 0
###
> With(t:MakeU4( 0, 20), r:t->ResizePixels(10,  0), (t, r))
With(t : MakeU4(0, 20), r : t->ResizePixels(10, 0), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u4[0,20], (Scope(1), Call(∂.ResizePixels(Scope(1), 10:i8, 0:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: () to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(0,20)<0,0> [],
    <null>)
###
> With(t:MakeU4(10,  0), r:t->ResizePixels( 0, 10), (t, r))
With(t : MakeU4(10, 0), r : t->ResizePixels(0, 10), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:1] [!  !]:u4[10,0], (Scope(1), Call(∂.ResizePixels(Scope(1), 0:i8, 10:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: () to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(10,0)<0,0> [],
    <null>)
###
> With(t:MakeU1( 3,  2, 4), r:t->ResizePixels( 3,  2), (t, r))
With(t : MakeU1(3, 2, 4), r : t->ResizePixels(3, 2), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(24:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 3:i8, 2:i8, 4:i8):u1[*,*,*]), (Scope(2), Call(∂.ResizePixels(Scope(2), 3:i8, 2:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(3,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]]

       [[8, 9, A, B]
        [C, D, E, F]]

       [[10, 11, 12, 13]
        [14, 15, 16, 17]]]
  ,
    Ten<u1>(3,2,4)<8,4,1>
      [[[0, 1, 2, 3]
        [4, 5, 6, 7]]

       [[8, 9, A, B]
        [C, D, E, F]]

       [[10, 11, 12, 13]
        [14, 15, 16, 17]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU4( 3,  2), r:t->ResizePixels( 3,  2), (t, r))
With(t : MakeU4(3, 2), r : t->ResizePixels(3, 2), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:3] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(6:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 3:i8, 2:i8):u4[*,*]), (Scope(3), Call(∂.ResizePixels(Scope(3), 3:i8, 2:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(3,2)<2,1>
      [[4030201, 8070605]
       [C0B0A09, 100F0E0D]
       [14131211, 18171615]]
  ,
    Ten<u4>(3,2)<2,1>
      [[4030201, 8070605]
       [C0B0A09, 100F0E0D]
       [14131211, 18171615]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1(3, 2, 4)[::-1], r:t->ResizePixels(6), (t, r))
With(t : MakeU1(3, 2, 4)[::-1], r : t->ResizePixels(6), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] GetSlice(Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(24:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 3:i8, 2:i8, 4:i8):u1[*,*,*]), Slice(null:i8?:null:i8?:-1:i8), Slice(null:i8?:null:i8?:null:i8?), Slice(null:i8?:null:i8?:null:i8?)):u1[*,*,*], (Scope(2), Call(∂.ResizePixels(Scope(2), 6:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(3,2,4)<-8,4,1>
      [[[10, 11, 12, 13]
        [14, 15, 16, 17]]

       [[8, 9, A, B]
        [C, D, E, F]]

       [[0, 1, 2, 3]
        [4, 5, 6, 7]]]
  ,
    Ten<u1>(9,6,4)<24,4,1>
      [[[10, 11, 12, 13]
        [10, 11, 12, 13]
        [12, 13, 14, 15]
        [13, 14, 15, 16]
        [14, 15, 16, 17]
        [14, 15, 16, 17]]

       [[F, 10, 11, 12]
        [10, 11, 12, 13]
        [11, 12, 13, 14]
        [12, 13, 14, 15]
        [13, 14, 15, 16]
        [14, 15, 16, 17]]

       [[D, E, F, 10]
        [E, F, 10, 11]
        [F, 10, 11, 12]
        [10, 11, 12, 13]
        [11, 12, 13, 14]
        [12, 13, 14, 15]]

       [[B, C, D, E]
        [B, C, D, E]
        [C, D, E, F]
        [E, F, 10, 11]
        [F, 10, 11, 12]
        [F, 10, 11, 12]]

       [[8, 9, A, B]
        [8, 9, A, B]
        [9, A, B, C]
        [B, C, D, E]
        [C, D, E, F]
        [C, D, E, F]]

       [[5, 6, 7, 8]
        [5, 6, 7, 8]
        [6, 7, 8, 9]
        [8, 9, A, B]
        [9, A, B, C]
        [9, A, B, C]]

       [[2, 3, 4, 5]
        [3, 4, 5, 6]
        [4, 5, 6, 7]
        [5, 6, 7, 8]
        [6, 7, 8, 9]
        [7, 8, 9, A]]

       [[0, 1, 2, 3]
        [1, 2, 3, 4]
        [2, 3, 4, 5]
        [3, 4, 5, 6]
        [4, 5, 6, 7]
        [5, 6, 7, 8]]

       [[0, 1, 2, 3]
        [0, 1, 2, 3]
        [...]]]
)
*** Ctx ping count: 0
###
> With(t:MakeU1(3, 2, 8)[:, :, ::2], r:t->ResizePixels(6), (t, r))
With(t : MakeU1(3, 2, 8)[:, :, ::2], r : t->ResizePixels(6), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:2] GetSlice(Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(48:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 3:i8, 2:i8, 8:i8):u1[*,*,*]), Slice(null:i8?:null:i8?:null:i8?), Slice(null:i8?:null:i8?:null:i8?), Slice(null:i8?:null:i8?:2:i8)):u1[*,*,*], (Scope(2), Call(∂.ResizePixels(Scope(2), 6:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(3,2,4)<16,8,2>
      [[[0, 2, 4, 6]
        [8, A, C, E]]

       [[10, 12, 14, 16]
        [18, 1A, 1C, 1E]]

       [[20, 22, 24, 26]
        [28, 2A, 2C, 2E]]]
  ,
    Ten<u1>(9,6,4)<24,4,1>
      [[[0, 1, 3, 5]
        [0, 2, 4, 6]
        [2, 4, 6, 8]
        [5, 7, 9, B]
        [7, 9, B, D]
        [8, A, C, E]]

       [[1, 3, 5, 7]
        [1, 3, 5, 7]
        [3, 5, 7, 9]
        [6, 8, A, C]
        [8, A, C, E]
        [9, B, D, F]]

       [[5, 7, 9, B]
        [5, 7, 9, B]
        [7, 9, B, D]
        [A, C, E, 10]
        [C, E, 10, 12]
        [D, F, 11, 13]]

       [[A, C, E, 10]
        [B, D, F, 11]
        [D, F, 11, 13]
        [10, 12, 14, 16]
        [12, 14, 16, 18]
        [13, 15, 17, 19]]

       [[10, 12, 14, 16]
        [10, 12, 14, 16]
        [13, 15, 17, 19]
        [15, 17, 19, 1B]
        [18, 1A, 1C, 1E]
        [18, 1A, 1C, 1E]]

       [[15, 17, 19, 1B]
        [16, 18, 1A, 1C]
        [18, 1A, 1C, 1E]
        [1B, 1D, 1F, 21]
        [1D, 1F, 21, 23]
        [1E, 20, 22, 24]]

       [[1B, 1D, 1F, 21]
        [1C, 1E, 20, 22]
        [1E, 20, 22, 24]
        [21, 23, 25, 27]
        [23, 25, 27, 29]
        [23, 25, 27, 29]]

       [[1F, 21, 23, 25]
        [20, 22, 24, 26]
        [22, 24, 26, 28]
        [25, 27, 29, 2B]
        [27, 29, 2B, 2D]
        [27, 29, 2B, 2D]]

       [[20, 22, 24, 26]
        [21, 23, 25, 27]
        [...]]]
)
*** Ctx ping count: 0
###
> With(t:Range(10 * 20)->CastU2()->Tensor.From(10, 20), r:t->ResizePixels(5), (t, r))
With(t : Range(10 * 20)->CastU2()->Tensor.From(10, 20), r : t->ResizePixels(5), (t, r)) : (u2[*,*], u4[*,*]?)
BndKind:Call, Type:(u2[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:2] Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(200:i8):i8*), Call(∂.CastU2(Scope(1)):u2)):u2*), 10:i8, 20:i8):u2[*,*]), (Scope(2), Call(∂.ResizePixels(Call(∂.Tensor.ForEachLazy([ten:3] Scope(2), Num<u4>(Scope(3))):u4[*,*]), 5:i8):u4[*,*]?)):(u2[*,*], u4[*,*]?)):(u2[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u2[*,*], u4[*,*]?)
Type: (Ten<u2>,Ten<u4>), Value: (
    Ten<u2>(10,20)<20,1>
      [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, 10, 11, 12, 13]
       [14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 21, 22, 23, 24, 25, 26, 27]
       [28, 29, 2A, 2B, 2C, 2D, 2E, 2F, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3A, 3B]
       [3C, 3D, 3E, 3F, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 4A, 4B, 4C, 4D, 4E, 4F]
       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5A, 5B, 5C, 5D, 5E, 5F, 60, 61, 62, 63]
       [64, 65, 66, 67, 68, 69, 6A, 6B, 6C, 6D, 6E, 6F, 70, 71, 72, 73, 74, 75, 76, 77]
       [78, 79, 7A, 7B, 7C, 7D, 7E, 7F, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 8A, 8B]
       [8C, 8D, 8E, 8F, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 9A, 9B, 9C, 9D, 9E, 9F]
       [A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, AA, AB, AC, AD, AE, AF, B0, B1, B2, B3]
       [B4, B5, B6, B7, B8, B9, BA, BB, BC, BD, BE, BF, C0, C1, C2, C3, C4, C5, C6, C7]]
  ,
    Ten<u4>(5,10)<10,1>
      [[A, C, E, 10, 12, 14, 16, 18, 1A, 1C]
       [32, 34, 36, 38, 3A, 3C, 3E, 40, 42, 44]
       [5A, 5C, 5E, 60, 62, 64, 66, 68, 6A, 6C]
       [82, 84, 86, 88, 8A, 8C, 8E, 90, 92, 94]
       [AA, AC, AE, B0, B2, B4, B6, B8, BA, BC]]
)
*** Ctx ping count: 0
###
> With(t:Tensor.Fill(0xFFu1, 1_000_000_000, 1_000_000_000, 4), r:t->ResizePixels(5), (t, r))
With(t : Tensor.Fill(255, 1000000000, 1000000000, 4), r : t->ResizePixels(5), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:1] Call(∂.Tensor.Fill(255:u1, 1000000000:i8, 1000000000:i8, 4:i8):u1[*,*,*]), (Scope(1), Call(∂.ResizePixels(Scope(1), 5:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(1000000000,1000000000,4)<0,0,0>
      [[[FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [...]]]
  ,
    <null>)
*** Ctx ping count: 0
###
> With(t:Tensor.Fill(0xFFFFFFu4, 1_000_000_000, 1_000_000_000), r:t->ResizePixels(5), (t, r))
With(t : Tensor.Fill(16777215, 1000000000, 1000000000), r : t->ResizePixels(5), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:1] Call(∂.Tensor.Fill(16777215:u4, 1000000000:i8, 1000000000:i8):u4[*,*]), (Scope(1), Call(∂.ResizePixels(Scope(1), 5:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(1000000000,1000000000)<0,0>

  ,
    <null>)
*** Ctx ping count: 0
###
> With(t:Tensor.Fill(0xFFu1, 1_000_000_000_000, 10, 4), r:t->ResizePixels(5), (t, r))
With(t : Tensor.Fill(255, 1000000000000, 10, 4), r : t->ResizePixels(5), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:1] Call(∂.Tensor.Fill(255:u1, 1000000000000:i8, 10:i8, 4:i8):u1[*,*,*]), (Scope(1), Call(∂.ResizePixels(Scope(1), 5:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(1000000000000,10,4)<0,0,0>
      [[[FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]]

       [[FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]]

       [[FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]]

       [[FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]]

       [[FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]]

       [[...]]]
  ,
    <null>)
*** Ctx ping count: 0
###
> With(t:Tensor.Fill(0xFFFFFFu4, 1_000_000_000_000, 10), r:t->ResizePixels(5), (t, r))
With(t : Tensor.Fill(16777215, 1000000000000, 10), r : t->ResizePixels(5), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:1] Call(∂.Tensor.Fill(16777215:u4, 1000000000000:i8, 10:i8):u4[*,*]), (Scope(1), Call(∂.ResizePixels(Scope(1), 5:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(1000000000000,10)<0,0>
      [[FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF, FFFFFF]
       [...]]
  ,
    <null>)
*** Ctx ping count: 0
###
> With(t:Tensor.Fill(0xFFu1, 10, 1_000_000_000_000, 4), r:t->ResizePixels(5), (t, r))
With(t : Tensor.Fill(255, 10, 1000000000000, 4), r : t->ResizePixels(5), (t, r)) : (u1[*,*,*], u1[*,*,*]?)
BndKind:Call, Type:(u1[*,*,*], u1[*,*,*]?), Bnd:(Call(∂.With([with:1] Call(∂.Tensor.Fill(255:u1, 10:i8, 1000000000000:i8, 4:i8):u1[*,*,*]), (Scope(1), Call(∂.ResizePixels(Scope(1), 5:i8):u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)):(u1[*,*,*], u1[*,*,*]?)))
Func sig: (<ctx>:x) to (u1[*,*,*], u1[*,*,*]?)
Type: (Ten<u1>,Ten<u1>), Value: (
    Ten<u1>(10,1000000000000,4)<0,0,0>
      [[[FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [FF, FF, FF, FF]
        [...]]]
  ,
    <null>)
*** Ctx ping count: 0
###
> With(t:Tensor.Fill(0xFFFFFFu4, 10, 1_000_000_000_000), r:t->ResizePixels(5), (t, r))
With(t : Tensor.Fill(16777215, 10, 1000000000000), r : t->ResizePixels(5), (t, r)) : (u4[*,*], u4[*,*]?)
BndKind:Call, Type:(u4[*,*], u4[*,*]?), Bnd:(Call(∂.With([with:1] Call(∂.Tensor.Fill(16777215:u4, 10:i8, 1000000000000:i8):u4[*,*]), (Scope(1), Call(∂.ResizePixels(Scope(1), 5:i8):u4[*,*]?)):(u4[*,*], u4[*,*]?)):(u4[*,*], u4[*,*]?)))
Func sig: (<ctx>:x) to (u4[*,*], u4[*,*]?)
Type: (Ten<u4>,Ten<u4>), Value: (
    Ten<u4>(10,1000000000000)<0,0>

  ,
    <null>)
*** Ctx ping count: 0
###
> MakeU1(1, 1, 4)->ResizePixels(-1, 2)
MakeU1(1, 1, 4)->ResizePixels(-1, 2) : u1[*,*,*]?
BndKind:Call, Type:u1[*,*,*]?, Bnd:(Call(∂.ResizePixels(Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(4:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 1:i8, 1:i8, 4:i8):u1[*,*,*]), -1:i8, 2:i8):u1[*,*,*]?))
Func sig: (<ctx>:x) to u1[*,*,*]?
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> MakeU4(1, 1)->ResizePixels(-1, 2)
MakeU4(1, 1)->ResizePixels(-1, 2) : u4[*,*]?
BndKind:Call, Type:u4[*,*]?, Bnd:(Call(∂.ResizePixels(Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(1:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 1:i8, 1:i8):u4[*,*]), -1:i8, 2:i8):u4[*,*]?))
Func sig: (<ctx>:x) to u4[*,*]?
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> MakeU1(1, 1, 4)->ResizePixels(1, 1_000_000_000_000)
MakeU1(1, 1, 4)->ResizePixels(1, 1000000000000) : u1[*,*,*]?
BndKind:Call, Type:u1[*,*,*]?, Bnd:(Call(∂.ResizePixels(Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(4:i8):i8*), Call(∂.CastU1(Scope(1)):u1)):u1*), 1:i8, 1:i8, 4:i8):u1[*,*,*]), 1:i8, 1000000000000:i8):u1[*,*,*]?))
Func sig: (<ctx>:x) to u1[*,*,*]?
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> MakeU4(1, 1)->ResizePixels(1, 1_000_000_000_000)
MakeU4(1, 1)->ResizePixels(1, 1000000000000) : u4[*,*]?
BndKind:Call, Type:u4[*,*]?, Bnd:(Call(∂.ResizePixels(Call(∂.Tensor.From(Call(∂.ForEach([map:1] Call(∂.Range(1:i8):i8*), Call(∂.With([with:2] Mul(Scope(1), 4:i8), Call(∂.CastU4(BitOr(BitAnd(Add(Scope(2), 1:i8), 255:i8), Shl(BitAnd(Add(Scope(2), 2:i8), 255:i8), 8:i8), Shl(BitAnd(Add(Scope(2), 3:i8), 255:i8), 16:i8), Shl(BitAnd(Add(Scope(2), 4:i8), 255:i8), 24:i8))):u4)):u4)):u4*), 1:i8, 1:i8):u4[*,*]), 1:i8, 1000000000000:i8):u4[*,*]?))
Func sig: (<ctx>:x) to u4[*,*]?
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> Tensor.Fill(0xFFu1, 1, 1_000_000, 4)->ResizePixels(1_000_000)
Tensor.Fill(255, 1, 1000000, 4)->ResizePixels(1000000) : u1[*,*,*]?
BndKind:Call, Type:u1[*,*,*]?, Bnd:(Call(∂.ResizePixels(Call(∂.Tensor.Fill(255:u1, 1:i8, 1000000:i8, 4:i8):u1[*,*,*]), 1000000:i8):u1[*,*,*]?))
Func sig: (<ctx>:x) to u1[*,*,*]?
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> Tensor.Fill(0xFFu1, 1_000_000, 1, 4)->ResizePixels(1_000_000)
Tensor.Fill(255, 1000000, 1, 4)->ResizePixels(1000000) : u1[*,*,*]?
BndKind:Call, Type:u1[*,*,*]?, Bnd:(Call(∂.ResizePixels(Call(∂.Tensor.Fill(255:u1, 1000000:i8, 1:i8, 4:i8):u1[*,*,*]), 1000000:i8):u1[*,*,*]?))
Func sig: (<ctx>:x) to u1[*,*,*]?
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
