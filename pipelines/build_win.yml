# The windows core pipeline definition for Rexl build pipeline. 
# Publishes the built artifacts to the artifact store
# if the `publishArtifacts` parameter is set to `true`.

parameters:
- name: buildConfig
  displayName: The build configuration
  type: string
  default: Release
- name: buildPlatform
  displayName: Build platform
  type: string
- name: poolName
  displayName: Pool name
  type: string
- name: workFolder
  displayName: Work folder
  type: string
- name: publishArtifacts
  displayName: Publish artifacts
  type: boolean
  default: true

jobs:
- job: Build_Win_${{ parameters.buildConfig }}
  displayName: Build Rexl Windows - ${{ parameters.buildConfig }}
  timeoutInMinutes: 20
  pool:
    name: ${{ parameters.poolName }}

  steps:
  - checkout: self
    clean: true
    lfs: true

  - task: CredScan@3
    displayName: Credentials scan
    inputs:
      outputFormat: 'csv'
      toolVersion: 'Latest'

  - task: AntiMalware@4
    inputs:
      InputType: 'Basic'
      ScanType: 'CustomScan'
      FileDirPath: '$(Build.StagingDirectory)'
      TreatSignatureUpdateFailureAs: 'Warning'
      SignatureFreshness: 'UpToDate'
      TreatStaleSignatureAs: 'Error'

  - task: DotNetCoreCLI@2
    displayName: Build Rexl.sln
    inputs:
      command: 'build'
      workingDirectory: $(Build.SourcesDirectory)/src
      projects: '$(Build.SourcesDirectory)/src/Rexl.sln'
      arguments: '-c ${{ parameters.buildConfig }} -p:Platform=${{ parameters.buildPlatform }}'

  - task: DotNetCoreCLI@2
    displayName: Run tests
    timeoutInMinutes: 5
    inputs:
      command: 'test'
      workingDirectory: $(Build.SourcesDirectory)/src
      projects: '$(Build.SourcesDirectory)/src/Rexl.sln'
      arguments: '--no-build -c ${{ parameters.buildConfig }} -p:Platform=${{ parameters.buildPlatform }}'

  - task: DotNetCoreCLI@2
    displayName: Publish Self-Contained RexlKernel
    inputs:
      command: 'publish'
      workingDirectory: $(Build.SourcesDirectory)/src
      projects: '$(Build.SourcesDirectory)/src/Apps/Kernel/RexlKernel/RexlKernel.csproj'
      arguments: '--sc -c ${{ parameters.buildConfig }} -p:Platform=${{ parameters.buildPlatform }} -o $(Build.ArtifactStagingDirectory)/Kernel'
      publishWebProjects: false
      zipAfterPublish: true
      modifyOutputPath: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish RexlKernel artifact'
    inputs:
      PathToPublish: '$(Build.ArtifactStagingDirectory)/Kernel'
      ArtifactName: 'Win_${{ parameters.buildPlatform }}_${{ parameters.buildConfig }}_Kernel'

  - ${{ if eq(parameters.publishArtifacts, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Create Nuget packages'
      inputs:
        command: 'pack'
        packagesToPack: '$(Build.SourcesDirectory)/src/Core/Rexl.Base/Rexl.Base.csproj;$(Build.SourcesDirectory)/src/Core/Rexl.Bind/Rexl.Bind.csproj;$(Build.SourcesDirectory)/src/Core/Rexl.Code/Rexl.Code.csproj;$(Build.SourcesDirectory)/src/Core/Rexl.Flow/Rexl.Flow.csproj;$(Build.SourcesDirectory)/src/Core/Rexl.Harness/Rexl.Harness.csproj;$(Build.SourcesDirectory)/src/Apps/Kernel/RexlKernel.Base/RexlKernel.Base.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/nuget'
        nobuild: true
        configuration: '${{ parameters.buildConfig }}'
        versioningScheme: 'off'
        buildProperties: 'VersionSuffix="$(Build.BuildNumber)"'

    - publish: '$(Build.ArtifactStagingDirectory)/packages/nuget'
      displayName: 'Publish Artifact: $(ArtifactNuGetName)'
      artifact: 'packages-nuget-${{ parameters.buildConfig }}'
